
/* 
 * Designer:   name, student id, email address 
 周圣植（zhoushengzhi）
 1209853G-I011-0119
 330521045@qq.com 
*/
#define MEMSIZE (65536 >> 2)
#include "spimcore.h"

/* ALU */
void ALU(unsigned A,unsigned B,char ALUControl,unsigned *ALUresult,char *Zero)
{
	if(ALUControl==0x0) *ALUresult=A + B;//add
	else if (ALUControl==0x1) *ALUresult=A - B;//sub
	else if (ALUControl==0x2) *ALUresult=(char)A < (char)B;//campared with A and B 
	else if (ALUControl==0x3) *ALUresult=A < B;//campared with A and B 
	else if (ALUControl==0x4) *ALUresult=A & B;// A and B 
	else if (ALUControl==0x5) *ALUresult=A | B;// A or B 
	else if (ALUControl==0x6) *ALUresult=B << 16 ;//Shift B left by 16 bits
	else if (ALUControl==0x7) *ALUresult= ~A ;// NOT A
	if(*ALUresult==0)//Assign Zero to 1 if the result is zero; otherwise, assign 0.取反 
		*Zero=1;
	else
		*Zero=0;
}

/* instruction fetch */
int instruction_fetch(unsigned PC,unsigned *Mem,unsigned *instruction)
{
	if((PC>>2) >= MEMSIZE){ 
		return 1;
	}//Return 1 if an invalid instruction is encountered; otherwise, return 0.
	*instruction=Mem[PC>>2];
	return 0;
}


/* instruction partition */
void instruction_partition(unsigned instruction, unsigned *op, unsigned *r1,unsigned *r2, unsigned *r3, unsigned *funct, unsigned *offset, unsigned *jsec)
{
	*op = instruction >> 26; 
    *r1 = (instruction & 0x03FFFFFF) >> 21;// 25 to 21  it should using the 0000 0011 FFFFFF to operation
    *r2 = (instruction & 0x001FFFFF) >> 16;// 20 to 16  it should using the 0000 0000 0001 FFFFF to operation
    *r3 = (instruction & 0x0000FFFF) >> 11;// 15 to 11  it should using the 0000 0000 0000 0000 FFFF to operation
    *funct = instruction & 0x0000003F ;//5 to 0
    *offset = instruction & 0x0000FFFF ;//15 to 0
    *jsec = instruction & 0x03FFFFFF ;//25 to 0 
}



/* instruction decode */
int instruction_decode(unsigned op,struct_controls *controls)
{
	if(op == 0x0){//R-format
	
		
		controls->RegWrite=1;
		controls->RegDst=1;
		controls->ALUOp=7;
		
	}
	else if(op == 0x02)//Jump 
	{
		controls->RegDst=2;
		controls->ALUSrc=2;
		
		controls->Jump=1;
		controls->ALUOp=0;//when in this function the value of ALU can be ignore
	}
	else if(op == 0x04)//Branch 
	{
		
		controls->Branch=1;
		
		controls->ALUOp=1;
	}
   	else if(op == 0x23)
	{
		
		controls->ALUSrc=1;
		controls->MemtoReg=1;
		
		controls->RegWrite=1;
		controls->MemRead=1;
		
		controls->ALUOp=0;
	}
	else if(op == 0x2B)
	{
		controls->RegDst=2;
		controls->ALUSrc=1;
		
		controls->MemWrite=1;
		
		
		controls->ALUOp=0;
	}
	else return 1;	//invalid 
	return 0;
}

/* Read Register */
void read_register(unsigned r1,unsigned r2,unsigned *Reg,unsigned *data1,unsigned *data2)
{
	*data1 = Reg[r1];
	*data2 = Reg[r2];
}


/* Sign Extend */
void sign_extend(unsigned offset,unsigned *extended_value)
{
*extended_value = (offset & 0x0000FFFF);
if (*extended_value & 0x00008000) 
    *extended_value |= 0xFFFF0000;
}

/* ALU operations */
int ALU_operations(unsigned data1,unsigned data2,unsigned extended_value,unsigned funct,char ALUOp,char ALUSrc,unsigned *ALUresult,char *Zero)
{
	switch(ALUOp){
		// R-type
		case 7:
			// funct = 0x20 = 32
			if(funct==0x20)ALU(data1,data2,0x0,ALUresult,Zero);	//add
			else if (funct==0x22)ALU(data1,data2,0x1,ALUresult,Zero);//sub
			else if (funct==0x2A)ALU(data1,data2,0x2,ALUresult,Zero);//campared with A and B
			else if (funct==0x2B)ALU(data1,data2,0x3,ALUresult,Zero);//campared with A and B
			else if (funct==0x24)ALU(data1,data2,0x4,ALUresult,Zero);//A and B
			else if (funct==0x25)ALU(data1,data2,0x5,ALUresult,Zero);//A or B
			else if (funct==0x27)ALU(data1,data2,0x7,ALUresult,Zero); //not 操作 
			else return 1;	//invalid funct
			break;
		default:
			return 1;		//invalid ALUop
	}
	if (ALUSrc == 1) ALU(data1,data2,extended_value,ALUresult,Zero);
	else ALU(data1,data2,ALUOp,ALUresult,Zero);
	return 0;
}

/* Read / Write Memory */
int rw_memory(unsigned ALUresult,unsigned data2,char MemWrite,char MemRead,unsigned *memdata,unsigned *Mem)
{
	if(MemRead == 1 && MemWrite != 1){
		*memdata = Mem[ALUresult>>2];//read  
	}
	if(MemWrite == 1 && MemRead != 1){
		Mem[ALUresult>>2] = data2;
	}
	if((ALUresult>>2)>MEMSIZE){ 
		return 1;
	}	
	return 0;
}

 
/* Write Register */
void write_register(unsigned r2,unsigned r3,unsigned memdata,unsigned ALUresult,char RegWrite,char RegDst,char MemtoReg,unsigned *Reg)
{
	if (RegWrite == 1){
		if(MemtoReg == 1){
			if(RegDst == 1)
			 Reg[r2] = memdata ;
		}
		else {
			if(RegDst == 0)
		     Reg[r3] = ALUresult ;
		}
	}
}

/* PC update */
void PC_update(unsigned jsec,unsigned extended_value,char Branch,char Jump,char Zero,unsigned *PC)
{
	*PC+=4;
	if(Branch == 1 && Zero == 1){
	    *PC+=(extended_value << 2);		
	}
	if(Jump == 1){
		*PC = *PC & 0xF0000000;
		*PC = *PC | (jsec << 2);
	}
}