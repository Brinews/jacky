

*/

#include "spimcore.h"

/* ALU */
void ALU(unsigned A,unsigned B,char ALUControl,unsigned *ALUresult,char *Zero)
{
	if(ALUControl==0x0)*ALUresult=A+B;//add
	if(ALUControl==0x1)*ALUresult=A-B;
	if(ALUControl==0x2)*ALUresult
	{
	  if(£¨signed)A<(signed)B)
	     *ALUresult = 1;
	  else
	     *ALUresult = 0;
	 }
	if(ALUControl==0x3)*ALUresult
	{
	  if(A<B)
	     *ALUresult = 1;
	  else
	     *ALUresult = 0;
	 }
	if(ALUControl==0x4)*ALUresult=A&B;
	if(ALUControl==0x5)*ALUresult=A|B;
	if(ALUControl==0x6)*ALUresult=B<<16;
	if(ALUControl==0x7)*ALUresult=~A;
}

/* instruction fetch */
int instruction_fetch(unsigned PC,unsigned *Mem,unsigned *instruction)
{
	if((*instruction=Mem[PC>>2])!=NULL)
	return 0;
	else
	return 1;
}


/* instruction partition */
void instruction_partition(unsigned instruction, unsigned *op, unsigned *r1,unsigned *r2, unsigned *r3, unsigned *funct, unsigned *offset, unsigned *jsec)
{   
	int a;
	
}



/* instruction decode */
int instruction_decode(unsigned op,struct_controls *controls)
{
	
	if(op==0x0){//R-format
		controls->RegWrite = 1;
		controls->RegDst = 1;
		controls->ALUOp = 7;
	}
	else if(op==0x2B){//lw
	   controls->RegWrite= 1;
	   controls->ALUsrc= 1;
	   controls->MemtoReg= 1;
	   controls->MemRead= 1;
	   controls->ALUOp = 0;
    }
	else if(op==0x35){//sw
	   controls->RegDst= 2;
	   controls->ALUsrc= 1;
	   controls->MemWhite= 1;
	   controls->MemtoReg= 2;
	   controls->MemRead= 2;
	    controls->ALUOp = 0;
    }
	else if(op==0x4){//branch 
	
		controls->RegDst= 2;
		controls->MemtoReg= 2;
		controls->MemRead= 2;
		controls->Branch= 1;
		controls->ALUOp= 1;
	}
	else if(op==0x2)//jump
	{
		ccontrols->Jump= 1;
		controls->ALUOp= 1;
	}


	else return 1;	//invalid instruction
	return 0;
}

/* Read Register */
void read_register(unsigned r1,unsigned r2,unsigned *Reg,unsigned *data1,unsigned *data2)
{
	*data1 = Reg[r1];
	*data2 = Reg[r2];
}


/* Sign Extend */
void sign_extend(unsigned offset,unsigned *extended_value)
{
    int b;
	b = offset>>15;
	if(b==1)
	{
		b = ~b;
		*extended_value=(b<<15)+offset;
	}
	if(b==0)
		*extended_value=(b<<15)+offset;
}

/* ALU operations */
int ALU_operations(unsigned data1,unsigned data2,unsigned extended_value,unsigned funct,char ALUOp,char ALUSrc,unsigned *ALUresult,char *Zero)
{
	switch(ALUOp){
		case 0://don't care
			break;
		case 1://sub
			ALU(data1,date2,0x1,ALUresult,Zero);
		case 2://signed set less than
			ALU(data1,date2,0x2,ALUresult,Zero);
		case 3://set less than
			ALU(data1,date2,0x3,ALUresult,Zero);
		case 4://and
			ALU(data1,date2,0x4,ALUresult,Zero);
		case 5://or
			ALU(data1,date2,0x5,ALUresult,Zero);
		case 6://shift 16
			ALU(date1,extened_value,0x6,ALUresult,Zero);		
		case 7:// R-type
			// funct = 0x20 = 32
			if(funct==0x20)ALU(data1,data2,0x0,ALUresult,Zero);	//add
			if(funct==0x22)ALU(data1,date2,0x1,ALUresult,Zero);//sub
			if(funct==0x24)ALU(data1,date2,0x4,ALUresult,Zero);//and
			if(funct==0x25)ALU(data1,date2,0x5,ALUresult,Zero);//or
			if(funct==0x2A)ALU(data1,date2,0x3,ALUresult,Zero);//slt			
			else return 1;	//invalid funct
			break;
		default:
			return 1;		//invalid ALUop
	}
	return 0;
}

/* Read / Write Memory */
int rw_memory(unsigned ALUresult,unsigned data2,char MemWrite,char MemRead,unsigned *memdata,unsigned *Mem)
{
	if(((ALUresult>>2)<MEMSIZE)&&(MemRead==1)&&(MenWrite==0)){
		*memdata = Mem[ALUresult>>2];
	else if(((ALUresult>>2)<MEMSIZE)&&(MemRead==0)&&(MenWrite==1)){
		Mem[ALUresult>>2] = *memdata;
	}
	else retuen 1;
	}
	
	return 0;
}

 
/* Write Register */
void write_register(unsigned r2,unsigned r3,unsigned memdata,unsigned ALUresult,char RegWrite,char RegDst,char MemtoReg,unsigned *Reg)
{

		if(RegWrite==1)
	{
		if(MemtoReg==0&&RegDst==0)
			 Reg[r2]=ALUresult;
		else if(MemtoReg==1&&RegDst==1)
			 Reg[r3]=memdata;
	    else if(MemtoReg==0&&RegDst==1)
			 Reg[r3]=ALUresult;
		else if(MemtoReg==1&&RegDst==0)
			 Reg[r2]=memdata;
	}
}

/* PC update */
void PC_update(unsigned jsec,unsigned extended_value,char Branch,char Jump,char Zero,unsigned *PC)
{
	*PC+=4;
	
}